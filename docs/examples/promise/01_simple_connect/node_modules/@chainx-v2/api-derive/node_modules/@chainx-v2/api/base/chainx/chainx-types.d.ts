declare const _default: {
    Address: string;
    Token: string;
    Desc: string;
    Memo: string;
    AddrStr: string;
    NetworkType: {
        _enum: string[];
    };
    Chain: {
        _enum: string[];
    };
    Precision: string;
    AssetId: string;
    AssetInfo: {
        token: string;
        token_name: string;
        chain: string;
        precision: string;
        desc: string;
    };
    AssetType: {
        _enum: string[];
    };
    AssetRestrictions: {
        mask: string;
    };
    AssetRestriction: {
        _enum: string[];
    };
    SignedBalance: {
        _enum: {
            Positive: string;
            Negative: string;
        };
    };
    Compact: string;
    BTCHeader: {
        version: string;
        previous_header_hash: string;
        merkle_root_hash: string;
        time: string;
        bits: string;
        once: string;
    };
    BTCHeaderInfo: {
        header: string;
        height: string;
        confirmed: string;
        txid_list: string;
    };
    OutPoint: {
        hash: string;
        index: string;
    };
    TransactionInput: {
        previous_output: string;
        script_sig: string;
        sequence: string;
        script_witness: string;
    };
    TransactionOutput: {
        value: string;
        script_pubkey: string;
    };
    BTCTransaction: {
        version: string;
        inputs: string;
        outputs: string;
        lock_time: string;
    };
    BTCTxType: {
        _enum: string[];
    };
    BTCTxInfo: {
        raw_tx: string;
        tx_type: string;
        height: string;
    };
    BTCAddrTyep: {
        _enum: string[];
    };
    BTCNetwork: {
        _enum: string[];
    };
    AddressHash: string;
    BTCAddress: {
        kind: string;
        network: string;
        hash: string;
    };
    BTCParams: {
        max_bits: string;
        block_max_future: string;
        target_timespan_seconds: string;
        target_spacing_seconds: string;
        retargeting_factor: string;
        retargeting_interval: string;
        min_timespan: string;
        max_timespan: string;
    };
    ContractInfo: string;
    XRC20Selector: {
        _enum: string[];
    };
    Selector: string;
    AssetInfoForRpc: {
        token: string;
        token_name: string;
        chain: string;
        precision: string;
        desc: string;
    };
    TotalAssetInfoForRpc: {
        info: string;
        balance: string;
        isOnline: string;
        restrictions: string;
    };
    MiningPower: string;
    MiningWeight: string;
    StakingRequirement: string;
    Price: string;
    PriceFluctuation: string;
    AssetLedger: {
        last_total_mining_weight: string;
        last_total_mining_weight_update: string;
    };
    BondRequirement: {
        self_bonded: string;
        total: string;
    };
    ClaimRestriction: {
        frequency_limit: string;
        staking_requirement: string;
    };
    FixedAssetPower: string;
    GlobalDistribution: {
        mining: string;
        treasury: string;
    };
    Handicap: {
        highest_bid: string;
        lowest_offer: string;
    };
    HandicapInfo: string;
    MinerLedger: {
        last_claim: string;
        last_mining_weight: string;
        last_mining_weight_update: string;
    };
    MiningDistribution: {
        asset: string;
        staking: string;
    };
    NominatorLedger: {
        last_vote_weight: string;
        last_vote_weight_update: string;
        nomination: string;
    };
    NominatorProfile: {
        last_rebond: string;
        unbonded_chunks: string;
    };
    Order: {
        already_filled: string;
        executed_indices: string;
        last_update_at: string;
        props: string;
        remaining: string;
        status: string;
    };
    OrderExecutedInfo: {
        executed_at: string;
        maker: string;
        maker_order_id: string;
        pair_id: string;
        price: string;
        taker: string;
        taker_order_id: string;
        trading_history_idx: string;
        turnover: string;
    };
    OrderId: string;
    OrderInfo: string;
    OrderProperty: {
        amount: string;
        created_at: string;
        id: string;
        order_type: string;
        pair_id: string;
        price: string;
        side: string;
        submitter: string;
    };
    OrderType: {
        _enum: string[];
    };
    TradingHistoryIndex: string;
    TradingPairId: string;
    TradingPairInfo: {
        last_updated: string;
        latest_price: string;
    };
    TradingPairProfile: {
        currency_pair: string;
        id: string;
        online: string;
        pip_precision: string;
        tick_precision: string;
    };
    Unbonded: {
        locked_until: string;
        value: string;
    };
    UnbondedIndex: string;
    ValidatorLedger: {
        last_total_vote_weight: string;
        last_total_vote_weight_update: string;
        total: string;
    };
    ValidatorProfile: {
        is_chilled: string;
        last_chilled: string;
        registered_at: string;
    };
    WeightType: string;
};
export default _default;
