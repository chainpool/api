"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// eslint-disable-next-line header/header
// eslint-disable-next-line @typescript-eslint/no-unused-vars
class XStaking {
  constructor(chainx) {
    this._api = void 0;
    this._api = chainx.api;
  }
  /**
   * Get overall information about all potential validators
   * @params name: AccountId
   *
   * */


  getValidators(...args) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
    return new Promise(resolve => {
      // eslint-disable-next-line no-void
      void this._api.then(async api => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
        const getValidators = await api.rpc.xstaking.getValidators(...args);
        resolve(getValidators);
      });
    });
  }
  /**
   * Get overall information given the validator AccountId.
   * @params name: AccountId
   *
   * */


  getValidatorByAccount(...args) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
    return new Promise(resolve => {
      // eslint-disable-next-line no-void
      void this._api.then(async api => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
        const getValidatorByAccount = await api.rpc.xstaking.getValidatorByAccount(...args);
        resolve(getValidatorByAccount);
      });
    });
  }
  /**
   * Get the staking dividends info given the staker AccountId.
   * @params name: AccountId
   * */


  getDividendByAccount(...args) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
    return new Promise(resolve => {
      // eslint-disable-next-line no-void
      void this._api.then(async api => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
        const getDividendByAccount = await api.rpc.xstaking.getDividendByAccount(...args);
        resolve(getDividendByAccount);
      });
    });
  }
  /**
   * Get the nomination details given the staker AccountId.
   * @params name: AccountId  name: Hash
   * */


  getNominationByAccount(...args) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
    return new Promise(resolve => {
      // eslint-disable-next-line no-void
      void this._api.then(async api => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
        const getNominationByAccount = await api.rpc.xstaking.getNominationByAccount(...args);
        resolve(getNominationByAccount);
      });
    });
  }

}

var _default = XStaking;
exports.default = _default;