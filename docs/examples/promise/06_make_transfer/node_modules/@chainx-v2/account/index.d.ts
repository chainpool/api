declare enum NET_PREFIX {
    testnet = 42,
    mainnet = 44
}
/**
 * interface KeyPair contains publickey and secretKey.
 *
*/
interface KeyPair {
    publicKey: Uint8Array;
    secretKey: Uint8Array;
}
/**
 * 保持兼容 @chainx-v2/keyring/pair
 */
declare class Account {
    /**
       * user publickKey and privateKey
      */
    private _keyPair;
    /**
       * generate a account
      */
    constructor(keyPair: KeyPair);
    /**
       * generate mainnet account or testnet account
       * @param net  NET_PREFIX.textnet || NET_PREFIX.mainnet
       * @return void
       *
      */
    static setNet(net: NET_PREFIX): void;
    /**
       * get private key
       * @return string
      */
    privateKey(): string;
    /**
      * @name publicKey
      * @summary
      * @description
      * Returns message of 'address', which is string type.
      */
    publicKey(): string;
    /**
      * @name address
      * @summary
      * @description
      * Returns message of 'address', which is string type.
      */
    address(): string;
    /**
      * @name sign
      * @summary Signs a message using the supplied secretKey
      * @description
      * Returns message signature of `message`, using the `secretKey`.
      * @example
      * <BR>
      *
      * ```javascript
      * import { sign } from '@chainx-v2/account';
      *
      * sign([...], [...]); // => [...]
      * ```
      */
    sign(message: string): Uint8Array;
    /**
      * @name verify
      * @summary Validate that the message was correctly signed
      * @description
      * Returns result of verify
      */
    verify(message: string, signature: string): boolean;
    /**
      * @name from
      * @summary generate account using unkwon string, which is seed, privatekey,keystore...
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static from(unknow: string): Account;
    /**
      * @name fromMnemonic
      * @summary generate account using mnemonic
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static fromMnemonic(mnemonic: string): Account;
    /**
      * @name fromPrivateKey
      * @summary generate account using mnemonic
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static fromPrivateKey(privateKey: string): Account;
    /**
       * Generate new public/secret keypair for Alice from the supplied seed
       * @param seedLike string
       */
    static fromSeed(seedLike: string): Account;
    /***
       *
       * Generate new public/secret keypair for Alice from the supplied text
       * @param text string
       *
      */
    static fromText(text: string): Account;
    /**
      * @name fromPrivateKey
      * @summary generate account using mnemonic
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static fromSecretKey(secretKey: string): Account;
    /**
      * @name fromPkcs8
      * @summary generate account using mnemonic
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static fromPkcs8(passphrase?: string, encoded?: any): Account;
    /**
      * @name fromJson
      * @summary generate account using mnemonic
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static fromJson(json: any, passphrase: any): Account;
    /**
      * @name generate
      * @summary generate a random acountt
      * @description
      * Returns acount of publicKey and seceretKey.
      */
    static generate(): Account;
    /**
      * @name newMnemonic
      * @summary generate a random mnemonic
      * @description
      * Returns Mnemonic
      */
    static newMnemonic(): string;
    /**
      * @name isMnemonicValid
      * @summary if menonic is valid or invalid
      * @description
      * Returns true or false
      */
    static isMnemonicValid(mnemonic: string): boolean;
    /**
      * @name isAddressValid
      * @summary if address is valid or invalid
      * @description
      * Returns true or false
      */
    static isAddressValid(address: string): boolean;
    /**
      * @name encodeAddress
      * @summary generate address from the publickKey
      * @description
      * Returns the address
      */
    static encodeAddress(pulickey: string): string;
    /**
      * @name decodeAddress
      * @summary generate address from the publickKey
      * @description
      * Returns the address
      */
    static decodeAddress(address: string, ignoreChecksum?: boolean, prefix?: any): string;
    /**
      * @name encodePkcs8
      * @summary  generate pksc8 from the passphrase
      * @description
      * Returns the address
      */
    encodePkcs8(passphrase: string): any;
}
export { Account, NET_PREFIX };
